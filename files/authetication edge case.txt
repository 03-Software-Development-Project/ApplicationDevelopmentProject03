 Login
 		DONE Empty username or password: An edge case would involve testing how the system handles login attempts with empty username or password fields. It should appropriately handle and provide an error message indicating that the fields are required.

    Long or short username/password: Testing the behavior when users enter extremely long or short usernames or passwords can be considered an edge case. The system should handle these inputs gracefully and provide appropriate validation or error messages.

    Special characters: Testing how the system handles usernames or passwords containing special characters, such as spaces, symbols, or non-alphanumeric characters, is important. The system should handle these inputs correctly, ensuring they are properly validated and stored securely.

    DONE Case sensitivity: An edge case would involve testing whether the login system treats usernames or passwords as case-sensitive or case-insensitive. The system should be consistent in its handling of case and provide appropriate validation.

    Concurrent logins: If the system allows multiple users to log in simultaneously, testing how it handles concurrent login attempts from the same user account can be considered an edge case. The system should handle such scenarios gracefully, preventing unexpected behavior or security issues.

    Account lockouts: Testing the behavior when a user exceeds the maximum number of login attempts and the account gets locked is important. The system should enforce proper lockout mechanisms, such as temporarily disabling the account or implementing a delay before allowing further login attempts.

    Password reset: An edge case would involve testing the password reset functionality. This includes scenarios like expired or invalid reset links, multiple password reset requests within a short period, or attempts to reset a password that does not meet the system's requirements.
    
    
    
  Register
      Unique username or email: The system should enforce uniqueness for usernames or email addresses during the registration process. Testing how the system handles attempts to register with a username or email that already exists is important to prevent duplicate accounts.

    Valid email format: The system should validate the format of the email address entered during registration. Testing how the system handles invalid email formats, such as missing "@" symbol or invalid domain names, is crucial to prevent registration with incorrect or non-functional email addresses.

    Password strength requirements: The registration process may have specific requirements for password strength, such as a minimum length, special characters, or a combination of uppercase and lowercase letters. Testing how the system enforces these requirements and provides appropriate feedback to users is essential.

    Captcha or anti-bot measures: To prevent automated registrations by bots or malicious scripts, many systems include Captcha or other anti-bot measures during registration. Testing the effectiveness of these measures and ensuring they don't hinder legitimate users is an important edge case to consider.

    Terms and conditions: If the registration process includes accepting terms and conditions, testing how the system handles scenarios where a user does not accept the terms or attempts to proceed without accepting is crucial. The system should appropriately notify users and prevent registration if terms and conditions are not agreed upon.

    Validation of optional fields: Some registration forms may include optional fields, such as phone number or date of birth. Testing how the system handles scenarios where users leave these fields blank or enter invalid information can help ensure a smooth registration process.

    Performance with a large number of simultaneous registrations: If the system expects a high volume of registrations, testing how the system performs under heavy load and simultaneous registration attempts is important. This helps ensure that the system can handle the expected number of registrations without performance degradation or errors.
