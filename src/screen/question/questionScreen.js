import {StyleSheet, View} from 'react-native';
import React, {Component} from 'react';
import {QUESTION_LIMIT, DESIREDDIFFICULTY} from '../../../env';
import QuestionComponent from '../../components/questionComponent/questionComponent';

// This is the data list
const questionData = require('../../../express/data/questions.json');

// Define the desired difficulty level
const desiredDifficulty = DESIREDDIFFICULTY.medium; // Replace with the desired difficulty level ('Easy', 'Medium', or 'Hard')
// Filter the question data based on the desired difficulty level

/* `const filteredQuestions` is creating a new array that contains only the questions from the
`questionData` array that have a difficulty level that matches the `desiredDifficulty` level. It is
using the `filter()` method to iterate over each element in the `questionData` array and return only
the elements that meet the specified condition, which is that the `difficulty` property of the
question object is equal to `desiredDifficulty` after converting it to lowercase using the
`toLowerCase()` method. The resulting array contains only the questions that match the desired
difficulty level. */
const filteredQuestions = questionData.filter(
  question => question.difficulty.toLowerCase() === desiredDifficulty,
);
console.log(filteredQuestions.length);

/* `const shuffledQuestions = filteredQuestions.sort(() => Math.random() - 0.5);` is shuffling the
`filteredQuestions` array randomly. It is using the `sort()` method to sort the array based on a
random number generated by `Math.random()`. The `Math.random()` function generates a random number
between 0 and 1, and subtracting 0.5 from it gives a random number between -0.5 and 0.5. This random
number is used as the sorting criteria, which results in the array being shuffled randomly. */
const shuffledQuestions = filteredQuestions.sort(() => Math.random() - 0.5);

/* `const limitedQuestions = shuffledQuestions.slice(0, QUESTION_LIMIT);` is creating a new array
called `limitedQuestions` that contains a subset of the `shuffledQuestions` array. The subset is
created using the `slice()` method, which takes two arguments: the starting index and the ending
index (exclusive). In this case, the starting index is 0 and the ending index is `QUESTION_LIMIT`,
which is a constant value defined in the `env.js` file. This means that `limitedQuestions` will
contain the first `QUESTION_LIMIT` number of elements from the `shuffledQuestions` array. */
const limitedQuestions = shuffledQuestions.slice(0, QUESTION_LIMIT);

class QuestionScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      currentQuestionIndex: 0,
    };
  }

  /* `handleAnswerSelect` is a function that is called when a user selects an answer to a question. It
takes in the `selectedAnswerId` as a parameter, which is the ID of the answer that the user
selected. */
  handleAnswerSelect = selectedAnswerId => {
    const {currentQuestionIndex} = this.state;
    console.log('currentQuestionIndex;', currentQuestionIndex);
    // Navigate to the next question or home screen
    if (currentQuestionIndex < limitedQuestions.length - 1) {
      this.setState({currentQuestionIndex: currentQuestionIndex + 1});
    } else {
      // All questions answered, navigate to the home screen
      this.props.navigation.navigate('Home'); // Replace 'Home' with the desired screen name
      this.setState({currentQuestionIndex: 0});
    }
  };

  render() {
    const {currentQuestionIndex} = this.state;
    return (
      <View style={styles.container}>
        {currentQuestionIndex < limitedQuestions.length && (
          <QuestionComponent
            question={limitedQuestions[currentQuestionIndex]}
            onAnswerSelect={this.handleAnswerSelect}
          />
        )}
      </View>
    );
  }
}
export default QuestionScreen;
const styles = StyleSheet.create({});
